

import React, { useState, useRef, useEffect} from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import { UserContext } from 'context/UserContext.jsx';



// material-ui
import {
  Card,
  CardHeader,
  CardContent,
  Divider,
  Grid,
  Typography,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  Box,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  MenuItem,
  Select,
  InputLabel,
  FormControl,
  IconButton
} from '@mui/material';

import DeleteIcon from '@mui/icons-material/Delete';

import { useNavigate } from 'react-router-dom';

// project import
import Breadcrumb from 'component/Breadcrumb';
import { gridSpacing } from 'config.js';

import ReceivingDocumentCard from './ReceivingDocumentCard';

import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { addPdfHeaderReceiving } from 'layout/PdfHeader/PdfHeader.jsx';


// ==============================|| RECEIVING TRANSACTION PAGE ||============================== //

const ReceivingTransactionPage = () => {
  const navigate = useNavigate();

  const [documentNumber, setDocumentNumber] = useState('');
  const [date, setDate] = useState('');
  const [time, setTime] = useState('');
  const [notes, setNotes] = useState('');
  const [receivedBy, setReceivedBy] = useState('Nama Pegawai Gudang'); // to be fetched from user context or input
  const userContext = React.useContext(UserContext); // Assuming UserContext provides logged-in user info

  const [items, setItems] = useState([]);
  const [productSearch, setProductSearch] = useState('');
  const [productSearchResults, setProductSearchResults] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);

  const [transactionSaved, setTransactionSaved] = useState(false);
  const [printDialogOpen, setPrintDialogOpen] = useState(false);
  const printRef = useRef(null);

  // Initialize date and time and document number on mount
  useEffect(() => {
    const now = new Date();
    setDate(now.toISOString().slice(0, 10));
    setTime(now.toLocaleTimeString());
    // Document number will be generated by backend, so leave empty or fetch if needed
  }, []);

  // Search products by name or id_barang
  useEffect(() => {
    if (productSearch.trim() === '') {
      setProductSearchResults([]);
      return;
    }
    const fetchProducts = async () => {
      try {
        const response = await axios.get('http://localhost:8000/toko-kyu-ryu/api/products', {
          params: { search: productSearch }
        });
        setProductSearchResults(response.data);
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };
    fetchProducts();
  }, [productSearch]);

  const handleAddItem = () => {
    if (!selectedProduct) {
      alert('Pilih barang terlebih dahulu.');
      return;
    }
    // Check if product already in items
    const existing = items.find((item) => item.id_barang === selectedProduct.id_barang);
    if (existing) {
      alert('Barang sudah ada di daftar penerimaan.');
      return;
    }
    setItems([
      ...items,
      {
        id_barang: selectedProduct.id_barang,
        nama_barang: selectedProduct.nama_barang,
        jumlah_diterima: 1,
        kondisi_barang: 'Baik'
      }
    ]);
    setSelectedProduct(null);
    setProductSearch('');
    setProductSearchResults([]);
  };

  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    if (field === 'jumlah_diterima') {
      const intValue = parseInt(value, 10);
      if (isNaN(intValue) || intValue <= 0) {
        alert('Jumlah diterima harus angka positif.');
        return;
      }
      newItems[index][field] = intValue;
    } else {
      newItems[index][field] = value;
    }
    setItems(newItems);
  };

  const handleRemoveItem = (index) => {
    const newItems = [...items];
    newItems.splice(index, 1);
    setItems(newItems);
  };

  const handleSaveTransaction = async () => {
    if (items.length === 0) {
      alert('Daftar item penerimaan kosong.');
      return;
    }
    try {
      console.log('User context user:', userContext.user);
      if (!userContext?.user?.id_user) {
        alert('User ID tidak ditemukan. Silakan login terlebih dahulu.');
        return;
      }
      const now = new Date();
      const payload = {
        nomor_dokumen_penerimaan: documentNumber, // backend will generate if empty
        tanggal_penerimaan: now.toISOString(),
        catatan: notes,
        id_pegawai_gudang: userContext.user.id_user, // Use logged-in user's id_user
        items: items.map((item) => {
          return {
            id_barang: item.id_barang,
            jumlah_diterima: item.jumlah_diterima,
            kondisi_barang: item.kondisi_barang,
          };
        })
      };
      const response = await axios.post('http://localhost:8000/toko-kyu-ryu/api/receiving-transactions', payload);
      const savedTransaction = response.data;
      setDocumentNumber(savedTransaction.nomor_dokumen_penerimaan);
      setTransactionSaved(true);
      alert('Penerimaan berhasil diverifikasi dan disimpan.');
    } catch (error) {
      console.error('Error saving transaction:', error);
      if (error.message !== 'Invalid harga_beli') {
        alert('Gagal menyimpan transaksi penerimaan.');
      }
    }
  };

  const handlePrintDocument = () => {
    setPrintDialogOpen(true);
  };

  const handleCancel = () => {
    if (window.confirm('Batalkan transaksi penerimaan?')) {
      setDocumentNumber('');
      setDate('');
      setTime('');
      setNotes('');
      setReceivedBy('');
      setItems([]);
      setTransactionSaved(false);
      navigate(-1);
    }
  };

  const handleClosePrintDialog = () => {
    setPrintDialogOpen(false);
  };

  const handlePrintPDF = async () => {
    if (!printRef.current) return;
    html2canvas(printRef.current, { scale: 2 }).then(async (canvas) => {
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

      // Add header
      await addPdfHeaderReceiving(pdf);

      // Add image below header
      pdf.addImage(imgData, 'PNG', 0, 44, pdfWidth, pdfHeight);

      pdf.save(`Dokumen_Penerimaan_${documentNumber || 'unknown'}.pdf`);
    });
  };

  return (
    <>
      <Breadcrumb title="Penerimaan Barang">
        <Typography component={Link} to="/" variant="subtitle2" color="inherit" className="link-breadcrumb">
          Home
        </Typography>
        <Typography variant="subtitle2" color="primary" className="link-breadcrumb">
          Penerimaan Barang
        </Typography>
      </Breadcrumb>
      <Grid container spacing={gridSpacing}>
        <Grid item xs={12}>
          <Card>
            <CardHeader title="Penerimaan Barang" />
            <CardContent>
              <Typography variant="body2" sx={{ mb: 2 }}>
                Formulir ini digunakan untuk mencatat barang yang diterima dari supplier.
              </Typography>
              <Divider sx={{ mb: 2 }} />
              {/* Section 1: Detail Transaksi Penerimaan */}
              <Box sx={{ mb: 3 }}>
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={6} md={3}>
                    <TextField
                      label="Nomor Dokumen Penerimaan"
                      value={documentNumber || 'Otomatis dihasilkan oleh sistem'}
                      InputProps={{
                        readOnly: true,
                      }}
                      fullWidth
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6} md={3}>
                    <TextField
                      label="Tanggal Penerimaan"
                      type="date"
                      value={date}
                      onChange={(e) => setDate(e.target.value)}
                      InputProps={{
                        readOnly: false,
                      }}
                      fullWidth
                      size="small"
                      InputLabelProps={{
                        shrink: true,
                      }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={12} md={6}>
                    <TextField
                      label="Catatan (Opsional)"
                      placeholder="Tambahkan catatan tambahan untuk penerimaan ini..."
                      multiline
                      rows={3}
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      fullWidth
                      size="small"
                    />
                  </Grid>
                </Grid>
              </Box>
              {/* Section 2: Daftar Item Barang yang Diterima */}
              <Box sx={{ mb: 1 }}>
                <Typography variant="subtitle1" sx={{ mb: 1 }}>
                  Tambah Barang Diterima
                </Typography>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={8}>
                    <TextField
                      label="Cari nama barang atau ID Barang"
                      value={productSearch}
                      onChange={(e) => {
                        setProductSearch(e.target.value);
                        setSelectedProduct(null);
                      }}
                      fullWidth
                      size="small"
                      placeholder="Cari nama barang... atau Masukkan ID Barang..."
                    />
                    {productSearchResults.length > 0 && (
                      <Box sx={{ maxHeight: 200, overflowY: 'auto', border: '1px solid #ccc', mt: 1 }}>
                        {productSearchResults.map((product) => (
                          <Box
                            key={product.id_barang}
                            sx={{
                              p: 1,
                              cursor: 'pointer',
                              backgroundColor: selectedProduct?.id_barang === product.id_barang ? '#ddd' : 'transparent',
                              '&:hover': { backgroundColor: '#eee' }
                            }}
                            onClick={() => setSelectedProduct(product)}
                          >
                            {product.nama_barang} (ID: {product.id_barang})
                          </Box>
                        ))}
                      </Box>
                    )}
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <Button
                      variant="contained"
                      color="primary"
                      fullWidth
                      onClick={handleAddItem}
                      disabled={!selectedProduct}
                    >
                      Tambah Barang
                    </Button>
                  </Grid>
                </Grid>
              </Box>
              {items.length > 0 && (
                <TableContainer sx={{ mt: 2 }}>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>No.</TableCell>
                        <TableCell>Nama Barang</TableCell>
                        <TableCell>Jumlah Diterima</TableCell>
                        <TableCell>Kondisi Barang</TableCell>
                        <TableCell>Aksi</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {items.map((item, index) => (
                        <TableRow key={item.id_barang}>
                          <TableCell>{index + 1}</TableCell>
                          <TableCell>
                            <TextField
                              value={item.nama_barang}
                              InputProps={{
                                readOnly: true,
                              }}
                              size="small"
                              fullWidth
                            />
                          </TableCell>
                          <TableCell>
                            <TextField
                              type="number"
                              value={item.jumlah_diterima}
                              onChange={(e) => handleItemChange(index, 'jumlah_diterima', e.target.value)}
                              inputProps={{ min: 1 }}
                              size="small"
                            />
                          </TableCell>
                          <TableCell>
                            <FormControl fullWidth size="small">
                              <Select
                                value={item.kondisi_barang}
                                onChange={(e) => handleItemChange(index, 'kondisi_barang', e.target.value)}
                              >
                                <MenuItem value="Baik">Baik</MenuItem>
                                <MenuItem value="Rusak">Rusak</MenuItem>
                                <MenuItem value="Cacat">Cacat</MenuItem>
                              </Select>
                            </FormControl>
                          </TableCell>
                          <TableCell>
                            <IconButton color="error" onClick={() => handleRemoveItem(index)}>
                              <DeleteIcon />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              )}
              {/* Section 3: Tombol Aksi */}
              <Box sx={{ mt: 3 }}>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handleSaveTransaction}
                  disabled={transactionSaved}
                >
                  Simpan Penerimaan
                </Button>
                <Button
                  variant="outlined"
                  color="secondary"
                  sx={{ ml: 2 }}
                  onClick={handlePrintDocument}
                  disabled={!transactionSaved}
                >
                  Cetak Dokumen
                </Button>
                <Button
                  variant="contained"
                  color="error"
                  sx={{ ml: 2 }}
                  onClick={handleCancel}
                >
                  Batal
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Dialog open={printDialogOpen} onClose={handleClosePrintDialog} maxWidth="md" fullWidth>
        <DialogTitle>Dokumen Penerimaan Barang</DialogTitle>
        <DialogContent dividers>
          {transactionSaved && (
            <div ref={printRef}>
              <ReceivingDocumentCard
                documentNumber={documentNumber}
                date={date}
                notes={notes}
                items={items}
                receivedBy={receivedBy}
              />
            </div>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClosePrintDialog} color="primary">
            Tutup
          </Button>
          <Button onClick={handlePrintPDF} color="primary" variant="contained">
            Cetak PDF
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default ReceivingTransactionPage;